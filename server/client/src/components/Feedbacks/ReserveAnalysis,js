import React, { useEffect, useRef, useState } from "react";
import { useFeedbackContext } from "../../hooks/useFeedbackContext.js";
import { useAuthContext } from "../../hooks/useAuthContext.js";
import { Chart, registerables } from "chart.js/auto";
import "./Analyze.css";
Chart.register(...registerables);

const Analyze = () => {
  const { feedbacks, dispatch } = useFeedbackContext();
  const { user } = useAuthContext();
  const [selectedSector, setSelectedSector] = useState("");
  const [selectedOffice, setSelectedOffice] = useState("");
  const chartRef = useRef(null);
  const chartInstanceRef = useRef(null);
  const [selectedState] = useState("both");
  const [labelCounts, setLabelCounts] = useState({});
  const [totalFeedbacks, setTotalFeedbacks] = useState(0);
  const [selectedLabel, setSelectedLabel] = useState("All Ratings");
  const [displayTable, setDisplayTable] = useState("none");

  useEffect(() => {
    const fetchFeedbacks = async () => {
      const response = await fetch("/api/feedbacks", {
        headers: { Authorization: `Bearer ${user.token}` },
      });
      const json = await response.json();

      if (response.ok) {
        dispatch({ type: "SET_WORKOUTS", payload: json });
      }
    };

    if (user) {
      fetchFeedbacks();
    }
  }, [dispatch, user]);

  useEffect(() => {
    if (feedbacks) {
      const labels = ["Not Good", "Average", "Good", "Very Good"];
      let filteredFeedbacks = feedbacks;

      // Filter feedbacks based on state, if applicable
      if (selectedState !== "both") {
        filteredFeedbacks = filteredFeedbacks.filter(
          (feedback) => feedback.identity?.toLowerCase() === selectedState
        );
      }

      // Count feedbacks by label
      const totalFeedbacksCount = filteredFeedbacks.length;
      const labelCounts = labels.reduce((acc, label) => {
        acc[label] = filteredFeedbacks.filter(
          (feedback) => feedback.stars === label
        ).length;
        return acc;
      }, {});

      setLabelCounts(labelCounts);
      setTotalFeedbacks(totalFeedbacksCount);

      if (chartInstanceRef.current) {
        chartInstanceRef.current.destroy();
      }

      const ctx = chartRef.current.getContext("2d");

      // Prepare chart data and keep it independent of selectedLabel
      const chartData = labels.map((label) => labelCounts[label] || 0);

      chartInstanceRef.current = new Chart(ctx, {
        type: "bar",
        data: {
          labels: labels,
          datasets: [
            {
              data: chartData,
              backgroundColor: ["#d40334", "#d5e6df", "#62de8b", "#53ad71"],
            },
          ],
        },
        options: {
          plugins: {
            legend: { display: true },
          },
        },
      });
    }
  }, [feedbacks, selectedSector, selectedOffice, selectedState]);

  const handleLabelClick = (label) => {
    setSelectedLabel(label);
    setSelectedSector("");
    setSelectedOffice("");
  };

  const getSectorCounts = () => {
    const sectorCounts = {};
    feedbacks.forEach((feedback) => {
      if (selectedLabel === "All Ratings" || feedback.stars === selectedLabel) {
        if (!sectorCounts[feedback.selectedSector]) {
          sectorCounts[feedback.selectedSector] = {};
        }
        sectorCounts[feedback.selectedSector][feedback.stars] =
          (sectorCounts[feedback.selectedSector][feedback.stars] || 0) + 1;
      }
    });
    return sectorCounts;
  };

  const getOfficeCounts = () => {
    const officeCounts = {};
    feedbacks
      .filter(
        (feedback) =>
          !selectedSector || feedback.selectedSector === selectedSector
      )
      .forEach((feedback) => {
        if (
          selectedLabel === "All Ratings" ||
          feedback.stars === selectedLabel
        ) {
          if (!officeCounts[feedback.selectedOffice]) {
            officeCounts[feedback.selectedOffice] = {};
          }
          officeCounts[feedback.selectedOffice][feedback.stars] =
            (officeCounts[feedback.selectedOffice][feedback.stars] || 0) + 1;
        }
      });
    return officeCounts;
  };

  return (
    <div className="analyze-container">
      <h2 className="title">Feedback Analysis</h2>

      <div className="total-ratings">
        <h4>Total Ratings: {totalFeedbacks}</h4>
        <ul>
          {Object.entries(labelCounts).map(([label, count]) => (
            <li key={label}>
              <strong>{label}:</strong> {count} feedbacks
            </li>
          ))}
        </ul>
      </div>

      <div className="content-wrapper">
        <div className="chart-container">
          {feedbacks && <canvas ref={chartRef} />}
        </div>

       
      </div>
 <div className="filter-buttons">
          <h4>Select Rating</h4>
          <div className="buttons">
            <button
              onClick={() => handleLabelClick("All Ratings")}
              className={`button ${
                selectedLabel === "All Ratings" ? "active" : ""
              }`}
            >
              All Ratings
            </button>
            {["Not Good", "Average", "Good", "Very Good"].map((label) => (
              <button
                key={label}
                onClick={() => handleLabelClick(label)}
                className={`button ${selectedLabel === label ? "active" : ""}`}
              >
                {label}
              </button>
            ))}
          </div>
        </div>
      <div className="table-buttons">
        <button
          onClick={() => setDisplayTable("sector")}
          className="button sector-btn"
        >
          Show Sector Table
        </button>
        <button
          onClick={() => setDisplayTable("office")}
          className="button office-btn"
        >
          Show Office Table
        </button>
      </div>

      {displayTable === "sector" && (
        <div className="sector-table">
          <h4>Sector Feedback Summary</h4>
          <table>
            <thead>
              <tr>
                <th>Sector</th>
                {selectedLabel === "All Ratings" && (
                  <>
                    <th>Not Good</th>
                    <th>Average</th>
                    <th>Good</th>
                    <th>Very Good</th>
                  </>
                )}
                {selectedLabel !== "All Ratings" && <th>{selectedLabel}</th>}
                <th>Date</th>
              </tr>
            </thead>
            <tbody>
              {Object.entries(getSectorCounts()).map(([sector, counts]) => (
                <tr key={sector}>
                  <td>{sector}</td>
                  {selectedLabel === "All Ratings" && (
                    <>
                      <td>{counts["Not Good"] || 0}</td>
                      <td>{counts["Average"] || 0}</td>
                      <td>{counts["Good"] || 0}</td>
                      <td>{counts["Very Good"] || 0}</td>
                    </>
                  )}
                  {selectedLabel !== "All Ratings" && (
                    <td>{counts[selectedLabel] || 0}</td>
                  )}
                  <td>{/* Add date handling here if applicable */}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {displayTable === "office" && (
        <div className="office-table">
          <h4>Office Feedback Summary</h4>
          <table>
            <thead>
              <tr>
                <th>Office</th>
                {selectedLabel === "All Ratings" && (
                  <>
                    <th>Not Good</th>
                    <th>Average</th>
                    <th>Good</th>
                    <th>Very Good</th>
                  </>
                )}
                {selectedLabel !== "All Ratings" && <th>{selectedLabel}</th>}
                <th>Date</th>
              </tr>
            </thead>
            <tbody>
              {Object.entries(getOfficeCounts()).map(([office, counts]) => (
                <tr key={office}>
                  <td>{office}</td>
                  {selectedLabel === "All Ratings" && (
                    <>
                      <td>{counts["Not Good"] || 0}</td>
                      <td>{counts["Average"] || 0}</td>
                      <td>{counts["Good"] || 0}</td>
                      <td>{counts["Very Good"] || 0}</td>
                    </>
                  )}
                  {selectedLabel !== "All Ratings" && (
                    <td>{counts[selectedLabel] || 0}</td>
                  )}
                  <td>{/* Add date handling here if applicable */}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
};

export default Analyze;
